{"version":3,"sources":["gulpfile.ts"],"names":[],"mappings":"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","file":"gulpfile.js","sourcesContent":["import { exec, spawn } from \"child_process\";\nimport path from \"path\";\nimport {\n    watch,\n} from \"gulp\";\n\nlet node;\nfunction execNode(resolve): void {\n    const ENTRY_POINT = path.resolve(__dirname, \"./dist/bin/www.js\");\n    if (node !== undefined) {\n        console.log(\"Changes made...\");\n        console.log(\"Node process exists, Killing node and restarting...\\n\");\n        node.kill();\n    }\n\n    console.log(\"Starting Node Process...\");\n    // Spawn returns stream while exec returns a buffer.\n    // stdio: options choose which streams are piped to the parent process.'\n    // stdio: [\"inherit\"] is the same as chosen below\n    node = spawn(\"node\", [\"--inspect=0.0.0.0:25585\", ENTRY_POINT],\n        { stdio: [process.stdin, process.stdout, process.stderr] });\n\n    node.on(\"close\", (code, signal) => {\n        if (code === 1 || code === 8) {\n            console.log(\"Errors detected. Node crashed. Will restart on changes...\");\n        }\n        if (code === 0) {\n            process.kill(process.pid, 0);\n        } else if (signal !== \"SIGTERM\") {\n            console.log(`NODE ERR\\nCODE: ${code}\\nSIGNAL: ${signal}`);\n        }\n    });\n\n    node.on(\"message\", (message) => {\n        console.log(`MESSAGE: ${message}`);\n    });\n}\n\nasync function transpileTS(filePathWithExt: string): Promise<void> {\n    const filePath = path.join(path.dirname(filePathWithExt), path.basename(filePathWithExt, \".ts\"));\n    // Outputs to the root dist folder\n    const destPath = (filePath.replace(/^src\\//, \"dist/\"));\n    const destDir = path.dirname(destPath);\n\n    await new Promise((resolve, reject) => {\n        exec(`mkdir -p \"${destDir}\"`, resolve);\n    });\n\n    await new Promise((resolve, reject) => {\n        exec(`babel \"${filePath}.ts\" -o \"${destPath}.js\" --source-maps=true`, async (err, stdout, stderr) => {\n            if (!err && !stderr) {\n                console.log(`\\nSUCCESS: Transpiled ${filePath}.ts to ${destPath}.js`);\n                if (stdout) console.log(stdout);\n                resolve();\n            } else if (err) {\n                console.log(`\\nERROR, couldn't execute command - ${err}`);\n                reject();\n            } else {\n                console.log(`\\nTRANSPILER ERR (for .ts) - ${stderr}`);\n                reject();\n            }\n        });\n    });\n}\n\nasync function transpileSCSS(filePathWithExt: string): Promise<void> {\n    const filePath = path.join(path.dirname(filePathWithExt), path.basename(filePathWithExt, \".scss\"));\n    // Outputs to ../css folder\n    const destPath = path.join(path.dirname(filePath), \"../css\");\n\n    await new Promise((resolve, reject) => {\n        exec(`node-sass \"${filePath}.scss\" -o \"${destPath}\"`, (err, stdout, stderr) => {\n            if (!err && !stderr) {\n                console.log(`\\nSUCCESS: Transpiled ${filePath} to ${destPath}`);\n                if (stdout) console.log(stdout);\n                resolve();\n            } else if (err) {\n                console.log(`\\nERROR, couldn't execute command - ${err}`);\n                reject();\n            } else {\n                console.log(`\\nTRANSPILER ERR (for .scss) - ${stderr}`);\n                reject();\n            }\n        });\n    });\n}\n\nfunction runNodeAndWatch(): void {\n    execNode();\n\n    const tsWatcher = watch(\"./**/*.ts\");\n    tsWatcher.on(\"change\", async (filePath) => {\n        await transpileTS(filePath);\n        execNode();\n    });\n\n    const scssWatcher = watch(\"./**/*.scss\");\n    scssWatcher.on(\"change\", async (filePath) => {\n        await transpileSCSS(filePath);\n        execNode();\n    });\n}\n\nfunction watchFiles(): void {\n    const tsWatcher = watch(\"./**/*.ts\");\n    tsWatcher.on(\"change\", (filePath) => {\n        transpileTS(filePath);\n    });\n\n    const scssWatcher = watch(\"./**/*.scss\");\n    scssWatcher.on(\"change\", (filePath) => {\n        transpileSCSS(filePath);\n    });\n}\n\nexports.default = runNodeAndWatch;\nexports.watch = watchFiles;\n"]}